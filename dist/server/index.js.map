{"version":3,"sources":["webpack:///webpack/bootstrap 935a99009eb10f1f2d4b","webpack:///./src/server/scripts/index.ts","webpack:///./src/server/scripts/web/WebHandler.ts","webpack:///external \"express\"","webpack:///external \"http\"","webpack:///external \"mongodb\"","webpack:///./src/server/scripts/config.ts","webpack:///external \"fs\""],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;ACtCA,0CAA0B,CAAkB,CAAC;AAC7C,uCAAsC,CAAS,CAAC;AAChD,sCAAkC,CAAU,CAAC;AAE7C,sBAAW,CAAC,OAAO,CAAC,gBAAM,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,EAAE;KACtC,EAAE,CAAC,CAAC,GAAG,CAAC;SACJ,MAAM,IAAI,KAAK,CAAC,6BAA6B,GAAC,GAAG,CAAC,CAAC;KAEvD,IAAI,GAAG,GAAG,IAAI,sBAAS,EAAE,CAAC;KAC1B,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC;AAC1C,EAAC,CAAC,CAAC;;;;;;;;ACVH,OAAY,OAAO,uBAAM,CAAS,CAAC;AACnC,oCAAqC,CAAM,CAAC;AAG5C;KAKI;SAEI,IAAI,CAAC,GAAG,GAAG,OAAO,EAAE,CAAC;SACrB,IAAI,CAAC,UAAU,GAAG,mBAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SAEzC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS,GAAG,SAAS,CAAC,CAAC,CAAC;SACpD,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG;aACvB,GAAG,CAAC,QAAQ,CAAC,SAAS,GAAG,oBAAoB,CAAC,CAAC;SACnD,CAAC,CAAC,CAAC;KACP,CAAC;KAED,OAAO,CAAC,IAAW;SAEf,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,EAAE;aACzB,OAAO,CAAC,GAAG,CAAC,6BAA6B,IAAI,EAAE,CAAC,CAAC;SACrD,CAAC,CAAC,CAAC;KACP,CAAC;AACL,EAAC;AAtBY,kBAAS,YAsBrB;;;;;;;AC1BD,qC;;;;;;ACAA,kC;;;;;;ACAA,qC;;;;;;;ACAA,OAAY,EAAE,uBAAM,CAAI,CAAC;AAGzB,4BAA2B;AAC3B,KAAI,MAAM,GAAG;KACT,KAAK,EAAE,WAAW;KAClB,SAAS,EAAE,WAAW;KACtB,WAAW,EAAE,WAAW;EAC3B;AAED,sCAAqC;AACrC,KAAI,UAAU,GAAG,SAAS,GAAG,cAAc,CAAC;AAC5C,QAAO,CAAC,GAAG,CAAC,4BAA4B,GAAC,UAAU,CAAC,CAAC;AACrD,GAAE,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;KAC3B,MAAM,IAAI,KAAK,CAAC,iGAAiG,CAAC,CAAC;AAEvH,mBAAkB;AAClB,OAAM,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,YAAY,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC;AACzD,QAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;AAG9B,mBAAe,MAAM,CAAC;;;;;;;ACrBtB,gC","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 935a99009eb10f1f2d4b\n **/","import { WebServer } from \"./web/WebHandler\";\r\nimport { MongoClient, ObjectID } from \"mongodb\";\r\nimport { default as config } from \"./config\";\r\n\r\nMongoClient.connect(config.dbURI, (err, db) => {\r\n    if (err)\r\n        throw new Error(\"Error connecting to mongo: \"+err);\r\n\r\n    var web = new WebServer();\r\n    web.connect(process.env.PORT || 3000);\r\n});\n\n\n/** WEBPACK FOOTER **\n ** ./src/server/scripts/index.ts\n **/","import * as express from \"express\";\r\nimport { Server, createServer } from \"http\"; \r\nimport { ILogger } from \"extension-services\";\r\n\r\nexport class WebServer\r\n{\r\n    httpServer : Server;\r\n    app: express.Express;\r\n    \r\n    constructor()\r\n    {\r\n        this.app = express();\r\n        this.httpServer = createServer(this.app);\r\n        \r\n        this.app.use(express.static(__dirname + '/public'));\r\n        this.app.get(\"*\", (req, res) => {\r\n            res.sendFile(__dirname + '/public/index.html');\r\n        });\r\n    }\r\n    \r\n    connect(port:number)\r\n    {\r\n        this.httpServer.listen(port, () => {\r\n            console.log(`webserverr listening on *:${port}`);\r\n        });\r\n    }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/server/scripts/web/WebHandler.ts\n **/","module.exports = require(\"express\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"express\"\n ** module id = 2\n ** module chunks = 0\n **/","module.exports = require(\"http\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"http\"\n ** module id = 3\n ** module chunks = 0\n **/","module.exports = require(\"mongodb\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"mongodb\"\n ** module id = 4\n ** module chunks = 0\n **/","import * as fs from \"fs\";\r\nimport * as path from \"path\";\r\n\r\n// Example config structure\r\nvar config = {\r\n    dbURI: \"CHANGE_ME\",\r\n    jwtSecret: \"CHANGE_ME\",\r\n    sendGridKey: \"CHANGE_ME\"\r\n}\r\n\r\n// Check the config is actually there\r\nvar configFile = __dirname + \"/config.json\";\r\nconsole.log(\"Loading config.json from: \"+configFile);\r\nif (!fs.existsSync(configFile))\r\n    throw new Error(\"You must define a config.json file in /resources/, see config.ts for an example of its contents\");\r\n\r\n// Load its values\r\nconfig = JSON.parse(fs.readFileSync(configFile, \"utf8\"));\r\nconsole.log(\"Config loaded!\");\r\n\r\n// Allow the rest of the app to use\r\nexport default config;\n\n\n/** WEBPACK FOOTER **\n ** ./src/server/scripts/config.ts\n **/","module.exports = require(\"fs\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"fs\"\n ** module id = 6\n ** module chunks = 0\n **/"],"sourceRoot":""}